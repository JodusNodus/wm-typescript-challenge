{"version":3,"file":"static/js/214.01a74ee4.chunk.js","mappings":"uHAEAA,eAAeC,EACbC,EACAC,GAEA,MAAMC,EAAkB,IAAIC,gBAAgBF,GACtCG,EAAMH,EAAM,UAAMD,EAAN,YAAcE,EAAgBG,YAAeL,EACzDM,QAAaC,MAAMH,GACzB,IAAKE,EAAKE,GACR,MAAM,IAAIC,MAAJ,UAAaH,EAAKI,OAAlB,aAA6BJ,EAAKK,aAE1C,OAAOL,EAAKM,O,yBAIP,MAAMC,EAAoB,IAC/Bd,EAAkC,wBAQvBe,EAAgB,CAACC,EAAeC,IAC3CjB,EAA8B,mBAAoB,CAChDgB,MAAOA,EAAMV,WACbW,OAAQA,EAAOX,c,6CCvBZ,MAAMY,EAAO,IAAwB,IAAvB,OAAEC,GAAoB,EACzC,OACE,gBAAKC,UAAU,+GAAf,UACE,iBAAKA,UAAU,kBAAf,WACE,eAAIA,UAAU,qCAAd,SAAoDD,EAAOE,OAC1DF,EAAOG,UACN,iBAAMF,UAAU,0GAAhB,SACGD,EAAOG,gBAERC,GAEJ,eAAIH,UAAU,oBAAd,0BACA,eAAIA,UAAU,qCAAd,SACGD,EAAOK,YAAYC,KAAKC,GCLjCA,IACoC,YAAaA,EDKnCC,CAAoBD,IACf,wBAA8BA,EAAWE,SAAhCF,EAAWE,UAG3B,0BACGF,EAAWG,OADd,IACuBH,EAAWI,KADlC,IACyCJ,EAAWA,aAD3CA,EAAWA,iBAO1B,eAAIN,UAAU,oBAAd,0BACA,gBAAKA,UAAU,UAAf,SAA0BD,EAAOY,qB,kGE1BzC,MA+BA,EA/BiB,KACf,MAAM,MAAEC,EAAF,KAASC,EAAT,UAAeC,IAAcC,EAAAA,EAAAA,UACjC,qBACArB,EAAAA,GAEF,OACE,6BACE,eAAIM,UAAU,8CAAd,qCAGCc,IACC,gBAAKd,UAAU,mCAAf,UACE,SAAC,KAAD,MAGHY,IACC,0BACE,oCAAYA,EAAM1B,gBAGrB2B,IACC,gBAAKb,UAAU,qEAAf,SACGa,EAAKG,UAAUX,KAAKN,IACnB,SAAC,IAAD,CAAwBA,OAAQA,GAArBA,EAAOE","sources":["api/index.ts","components/card/index.tsx","types/Ingredient.ts","pages/homepage/index.tsx"],"sourcesContent":["import { Recipe } from \"types\";\n\nasync function getApi<T>(\n  path: string,\n  params?: Record<string, string>\n): Promise<T> {\n  const urlSearchParams = new URLSearchParams(params);\n  const url = params ? `${path}?${urlSearchParams.toString()}` : path;\n  const resp = await fetch(url);\n  if (!resp.ok) {\n    throw new Error(`${resp.status}: ${resp.statusText}`);\n  }\n  return resp.json();\n}\n\nexport type GetPopularRecipesResponse = { cocktails: Recipe[] };\nexport const getPopularRecipes = () =>\n  getApi<GetPopularRecipesResponse>(\"/api/recipes/popular\");\n\nexport type GetAllRecipesResponse = {\n  total: number;\n  limit: number;\n  offset: number;\n  data: Recipe[];\n};\nexport const getAllRecipes = (limit: number, offset: number) =>\n  getApi<GetAllRecipesResponse>(\"/api/recipes/all\", {\n    limit: limit.toString(),\n    offset: offset.toString(),\n  });\n","import { Recipe, isSpecialIngredient } from \"types\";\n\ntype Props = {\n  recipe: Recipe;\n};\nexport const Card = ({ recipe }: Props) => {\n  return (\n    <div className=\"flex rounded border border-gray-200 bg-white/50 p-4 dark:border-gray-500 dark:bg-gray-800 dark:text-gray-300\">\n      <div className=\"block space-y-2\">\n        <h2 className=\"text-2xl font-bold dark:text-white\">{recipe.name}</h2>\n        {recipe.category ? (\n          <span className=\"mr-1 inline-block rounded bg-pink-200 px-2 py-1 text-xs font-semibold uppercase text-pink-800 last:mr-0\">\n            {recipe.category}\n          </span>\n        ) : undefined}\n\n        <h3 className=\"text-lg font-bold\">Ingredients</h3>\n        <ul className=\"list-inside list-disc px-1 text-sm\">\n          {recipe.ingredients.map((ingredient) => {\n            if (isSpecialIngredient(ingredient)) {\n              return <li key={ingredient.special}>{ingredient.special}</li>;\n            }\n            return (\n              <li key={ingredient.ingredient}>\n                {ingredient.amount} {ingredient.unit} {ingredient.ingredient}\n              </li>\n            );\n          })}\n        </ul>\n\n        <h3 className=\"text-lg font-bold\">Preparation</h3>\n        <div className=\"text-sm\">{recipe.preparation}</div>\n      </div>\n    </div>\n  );\n};\n","export type NormalIngredient = {\n  unit: string;\n  amount: number;\n  ingredient: string;\n};\n\nexport type SpecialIngredient = {\n  special: string;\n};\n\nexport type Ingredient = NormalIngredient | SpecialIngredient;\n\nexport const isSpecialIngredient = (\n  ingredient: Ingredient\n): ingredient is SpecialIngredient => \"special\" in ingredient;\n","import { GetPopularRecipesResponse, getPopularRecipes } from \"api\";\nimport { Spinner } from \"components\";\nimport { Card } from \"components/card\";\nimport { useQuery } from \"react-query\";\n\nconst Homepage = () => {\n  const { error, data, isLoading } = useQuery<GetPopularRecipesResponse, Error>(\n    \"mostPopularRecipes\",\n    getPopularRecipes\n  );\n  return (\n    <main>\n      <h1 className=\"mb-5 text-3xl font-semibold dark:text-white\">\n        Most popular cocktails.\n      </h1>\n      {isLoading && (\n        <div className=\"flex items-center justify-center\">\n          <Spinner />\n        </div>\n      )}\n      {error && (\n        <div>\n          <h2>Error: {error.toString()}</h2>\n        </div>\n      )}\n      {data && (\n        <div className=\"grid grid-flow-row auto-rows-max grid-cols-1 gap-2 md:grid-cols-3 \">\n          {data.cocktails.map((recipe) => (\n            <Card key={recipe.name} recipe={recipe} />\n          ))}\n        </div>\n      )}\n    </main>\n  );\n};\n\nexport default Homepage;\n"],"names":["async","getApi","path","params","urlSearchParams","URLSearchParams","url","toString","resp","fetch","ok","Error","status","statusText","json","getPopularRecipes","getAllRecipes","limit","offset","Card","recipe","className","name","category","undefined","ingredients","map","ingredient","isSpecialIngredient","special","amount","unit","preparation","error","data","isLoading","useQuery","cocktails"],"sourceRoot":""}